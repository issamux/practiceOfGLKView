//
//  Shader.fsh
//  practiceOfGLKView
//
//  Created by nakano_michiharu on 2013/09/15.
//  Copyright (c) 2013年 nakano_michiharu. All rights reserved.
//
uniform sampler2D uSamplerBase;
uniform sampler2D uSamplerBurn;
//uniform sampler2D uSamplerScanLine;
varying vec2 vTexcoord;
uniform vec4 uColorOverlay;

float overlayMono(float monoBase, float eff)
{
	if (monoBase < 0.5) {
		return monoBase * eff * 2.0;
	}
	else {
		return 1.0 - 2.0 * (1.0 - monoBase) * (1.0 - eff);
	}
}

float burn(float base, float eff)
{
	float result = eff;
	if (eff == 0.0) {
		result = 0.0;
	}
	else {
		result = 1.0 - ((1.0 - base) / eff);
	}
	result = min(1.0, result);
	return max(0.0, result);
}



void main()
{
	// TODO ラスタずらし
	vec4 colorBase = texture2D(uSamplerBase, vTexcoord);

	// モノクロ化  = ( 0.298912 * R + 0.586611 * G + 0.114478 * B )
	float monoVal = colorBase.r * 0.298912 + colorBase.g * 0.586611 + colorBase.b * 0.114478;
	vec4 color;
	color.r = overlayMono(monoVal, uColorOverlay.r);
	color.g = overlayMono(monoVal, uColorOverlay.g);
	color.b = overlayMono(monoVal, uColorOverlay.b);
	vec4 colorEff = texture2D(uSamplerBurn, vTexcoord);
	if (colorEff.a > 0.0) {
		colorEff.r = burn(color.r, colorEff.r);
		colorEff.g = burn(color.g, colorEff.g);
		colorEff.b = burn(color.b, colorEff.b);
		color = (color * (1.0 - colorEff.a)) + (colorEff * colorEff.a);
	}
	color.a = 1.0;

	gl_FragColor = color;
}
